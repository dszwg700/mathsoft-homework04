\documentclass[12pt,a4paper]{ctexart}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{amsthm}
\usepackage{algorithm}
\usepackage{algorithmicx}
\usepackage{algpseudocode}
\usepackage{listings}
\usepackage{color}
\usepackage{subfigure}
\usepackage{caption}
\usepackage[hmargin={3.18cm, 3.18cm}, width=14.64cm, vmargin={2.54cm, 2.54cm}, height=24.62cm]{geometry}

\renewcommand{\algorithmicrequire}{\textbf{Input:}}  
\renewcommand{\algorithmicensure}{\textbf{Output:}}  

\definecolor{mygreen}{rgb}{0,0.6,0}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{mymauve}{rgb}{0.58,0,0.82}

\lstset{ %
  backgroundcolor=\color{white},   % choose the background color
  basicstyle=\footnotesize,        % size of fonts used for the code
  breaklines=true,                 % automatic line breaking only at whitespace
  captionpos=b,                    % sets the caption-position to bottom
  commentstyle=\color{mygreen},    % comment style
  escapeinside={\%*}{*)},          % if you want to add LaTeX within your code
  keywordstyle=\color{blue},       % keyword style
  stringstyle=\color{mymauve},     % string literal style
}

\title{作业四：Mandelbrot set的生成与探索}
\author{明安图　\\ 统计学　319101841}
\date{}

\begin{document}

\maketitle
算法
\begin{algorithm}
\caption{Mandelbrot set algorithm}\label{alg:cap}

\begin{algorithmic}
  \Require Iteration $N$
  \Ensure Mandelbrot set
  \State $z \leftarrow 0$

  \For {each pixel p$(a,b)$ of the image}
  \State $c \leftarrow a+bi$
  \For {$i=1 \rightarrow N$}
   \If {$|z|>2$}
    \State $p \leftarrow white$
    \State go to the next pixel
    \Else
    \State $z \rightarrow z^2+c$
   \EndIf
  \EndFor
   
  \If {$z$ reached its natural end}
  \State $p \leftarrow black$
  \State go to the next pixel
  \EndIf
 \EndFor
\end{algorithmic}
\end{algorithm}

代码
\begin{lstlisting}[language=C++]
#include <iostream>
#include <cstdlib>
#include "Window.h"
#include "Manderbrot.h"
#include "bitmap.h"

int main(int argc, char *argv[])
{
	if (argc < 5)
	{
		std::cerr << "Usage: " << argv[0]
				  << " filename ox oy dimension" << std::endl;
		exit(-1);
	}
	
	Window win(std::atof(argv[2]), std::atof(argv[3]), std::atof(argv[4]));
	double lpp = win.get_lpp();
	double dim = win.get_dimension();
	int width = win.get_width();
	int height = win.get_height();
	double ox = win.get_ox() - dim;
	double oy = win.get_oy() - dim / width * height;
	int N = 100;

	char *cache = new char[width * height * 3];

	for (int j = 0; j < height; j++)
		for (int i = 0; i < width; i++)
		{
			double x = ox + lpp * i;
			double y = oy + lpp * j;
			int pos = width * j + i; 
			Manderbrot man(std::complex<double>{0.0, 0.0},
						   N,
						   std::complex<double>{x, y});
			while (!man.stop_criterion())
			{
				man.forward_step();
				if (man.is_disconvergence())
					break;
			}
			if (man.stop_criterion())
			{
				cache[pos * 3] = 255;
				cache[pos * 3 + 1] = 255;
				cache[pos * 3 + 2] = 255;
			}
			else
			{
				cache[pos * 3] = 0;
				cache[pos * 3 + 1] = 0;
				cache[pos * 3 + 2] = 0;
			}
		}
	build_bmp(argv[1], width, height, cache);
	delete [] cache;
	return 0;
};
\end{lstlisting}

数值算例

\begin{figure}[H]
  \subfigure[全图]{
    \includegraphics[width=.5\textwidth]{01.bmp}}
   \hspace{0.5in}
   \subfigure[局部]{
     \includegraphics[width=.5\textwidth]{02.bmp}}
   \caption{数值算例}
      
\end{figure}

\end{document}
